import logging
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, ContextTypes, filters, ConversationHandler
import MetaTrader5 as mt5
import os

# إعدادات التسجيل (logging)
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# الحالات للمحادثة
LOGIN, PASSWORD, SERVER = range(3)

# تخزين بيانات المستخدمين
user_sessions = {}

# قائمة أزرار القائمة الرئيسية
def main_menu_keyboard():
    return ReplyKeyboardMarkup(
        [
            [KeyboardButton("🔑 تسجيل الدخول"), KeyboardButton("📈 تحليل السوق")],
            [KeyboardButton("💰 الرصيد"), KeyboardButton("🚪 تسجيل الخروج")]
        ],
        resize_keyboard=True
    )

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "مرحباً بك في بوت التداول مع MT5!\nاختر من القائمة:",
        reply_markup=main_menu_keyboard()
    )

async def logout(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if user_id in user_sessions:
        del user_sessions[user_id]
        await update.message.reply_text("تم تسجيل الخروج بنجاح.", reply_markup=main_menu_keyboard())
    else:
        await update.message.reply_text("أنت غير مسجل دخول أصلاً.", reply_markup=main_menu_keyboard())

async def balance(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    session = user_sessions.get(user_id)
    if session and session['connected']:
        acc_info = mt5.account_info()
        if acc_info:
            await update.message.reply_text(f"رصيدك الحالي: {acc_info.balance} USD")
        else:
            await update.message.reply_text("تعذر جلب الرصيد. تأكد من اتصالك.")
    else:
        await update.message.reply_text("يرجى تسجيل الدخول أولاً.", reply_markup=main_menu_keyboard())

async def analysis(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    session = user_sessions.get(user_id)
    if session and session['connected']:
        rates = mt5.copy_rates_from_pos("EURUSD", mt5.TIMEFRAME_M1, 0, 1)
        if rates is not None and len(rates) > 0:
            price = rates[0]['close']
            await update.message.reply_text(f"سعر EURUSD الحالي: {price}")
        else:
            await update.message.reply_text("تعذر جلب بيانات السوق.")
    else:
        await update.message.reply_text("يرجى تسجيل الدخول أولاً.", reply_markup=main_menu_keyboard())

# ==========================
# إجراءات تسجيل الدخول
# ==========================

async def login_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("أدخل رقم حساب MT5 الخاص بك:")
    return LOGIN

async def login_account(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['login'] = update.message.text
    await update.message.reply_text("أدخل كلمة المرور:")
    return PASSWORD

async def login_password(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['password'] = update.message.text
    await update.message.reply_text("أدخل اسم الخادم (Server Name):")
    return SERVER

async def login_server(update: Update, context: ContextTypes.DEFAULT_TYPE):
    server = update.message.text
    login = context.user_data['login']
    password = context.user_data['password']

    # محاولة الاتصال بـ MT5
    if mt5.initialize(server=server, login=int(login), password=password):
        user_id = update.effective_user.id
        user_sessions[user_id] = {
            'login': login,
            'server': server,
            'connected': True
        }
        await update.message.reply_text("✅ تم تسجيل الدخول بنجاح!", reply_markup=main_menu_keyboard())
        return ConversationHandler.END
    else:
        await update.message.reply_text("❌ فشل تسجيل الدخول. تأكد من البيانات وأعد المحاولة.")
        return ConversationHandler.END

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("تم إلغاء العملية.", reply_markup=main_menu_keyboard())
    return ConversationHandler.END

def main():
    TOKEN = os.getenv("TELEGRAM_BOT_TOKEN", "8112822168:AAGwqxRY5xZ23pi5PjEhNkytuXLzjaJ1qVI")
    application = ApplicationBuilder().token(TOKEN).build()

    # محادثة تسجيل الدخول
    login_conversation = ConversationHandler(
        entry_points=[MessageHandler(filters.Regex("^🔑 تسجيل الدخول$"), login_start)],
        states={
            LOGIN: [MessageHandler(filters.TEXT & ~filters.COMMAND, login_account)],
            PASSWORD: [MessageHandler(filters.TEXT & ~filters.COMMAND, login_password)],
            SERVER: [MessageHandler(filters.TEXT & ~filters.COMMAND, login_server)],
        },
        fallbacks=[CommandHandler('cancel', cancel)]
    )

    application.add_handler(CommandHandler("start", start))
    application.add_handler(login_conversation)
    application.add_handler(MessageHandler(filters.Regex("^🚪 تسجيل الخروج$"), logout))
    application.add_handler(MessageHandler(filters.Regex("^💰 الرصيد$"), balance))
    application.add_handler(MessageHandler(filters.Regex("^📈 تحليل السوق$"), analysis))

    print("Bot is running...")
    application.run_polling()

if __name__ == "__main__":
    main()
