import os
import requests
import hmac
import hashlib
import time
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler, filters,
    ConversationHandler, ContextTypes
)

# ==== إعدادات الحالات ====
API_KEY, API_SECRET = range(2)
TRADE_ACTION, TRADE_SIZE, TRADE_SL, TRADE_TP = range(10, 14)

# ==== تخزين بيانات المستخدم ====
user_sessions = {}

# ==== Bybit API ==== 
BYBIT_API_URL = "https://api.bybit.com"

def sign_request(api_key, api_secret, params):
    params['api_key'] = api_key
    params['timestamp'] = int(time.time() * 1000)
    sorted_params = "&".join([f"{k}={params[k]}" for k in sorted(params)])
    signature = hmac.new(
        api_secret.encode(),
        sorted_params.encode(),
        hashlib.sha256
    ).hexdigest()
    params['sign'] = signature
    return params

def bybit_request(endpoint, params, api_key, api_secret, req_type="GET"):
    url = BYBIT_API_URL + endpoint
    params = sign_request(api_key, api_secret, params)
    if req_type == "GET":
        r = requests.get(url, params=params)
    else:
        r = requests.post(url, data=params)
    return r.json()

# ==== لوحة الأزرار ====
def main_menu_keyboard():
    return ReplyKeyboardMarkup(
        [
            [KeyboardButton("📈 سعر السوق"), KeyboardButton("💰 رصيد الحساب")],
            [KeyboardButton("🟢 شراء"), KeyboardButton("🔴 بيع")],
            [KeyboardButton("🔁 تداول تلقائي"), KeyboardButton("🚪 تسجيل الخروج")]
        ],
        resize_keyboard=True
    )

# ==== أوامر تيليجرام ====
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if user_id in user_sessions and user_sessions[user_id].get("api_key"):
        await update.message.reply_text("مرحبًا بك مجددًا! اختر من القائمة:", reply_markup=main_menu_keyboard())
        return
    await update.message.reply_text("أدخل Bybit API Key الخاصة بك:")
    return API_KEY

async def logout(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    user_sessions.pop(user_id, None)
    await update.message.reply_text("تم تسجيل الخروج.", reply_markup=main_menu_keyboard())

# ==== تسجيل الدخول (API Key و Secret) ====
async def get_api_key(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["api_key"] = update.message.text.strip()
    await update.message.reply_text("أدخل Bybit API Secret الخاصة بك:")
    return API_SECRET

async def get_api_secret(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    context.user_data["api_secret"] = update.message.text.strip()
    user_sessions[user_id] = {
        "api_key": context.user_data["api_key"],
        "api_secret": context.user_data["api_secret"],
        "auto_trade": False
    }
    await update.message.reply_text("✅ تم تسجيل الدخول بنجاح!", reply_markup=main_menu_keyboard())
    return ConversationHandler.END

# ==== سعر السوق ====
async def market_price(update: Update, context: ContextTypes.DEFAULT_TYPE):
    symbol = "BTCUSDT"
    url = f"{BYBIT_API_URL}/v5/market/tickers?category=linear&symbol={symbol}"
    r = requests.get(url)
    data = r.json()
    price = data['result']['list'][0]['lastPrice'] if data['result']['list'] else "غير متوفر"
    await update.message.reply_text(f"سعر {symbol} الحالي: {price}")

# ==== رصيد الحساب ====
async def account_balance(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    session = user_sessions.get(user_id)
    if not session:
        await update.message.reply_text("يرجى تسجيل الدخول أولاً.")
        return
    api_key = session["api_key"]
    api_secret = session["api_secret"]

    params = {"accountType": "UNIFIED"}
    resp = bybit_request("/v5/account/wallet-balance", params, api_key, api_secret)
    try:
        usdt_balance = resp["result"]["list"][0]["coin"][0]["walletBalance"]
        await update.message.reply_text(f"رصيدك (USDT): {usdt_balance}")
    except Exception:
        await update.message.reply_text("حدث خطأ أثناء جلب الرصيد.")

# ==== بدء التداول اليدوي ====
async def trade_action(update: Update, context: ContextTypes.DEFAULT_TYPE):
    action = update.message.text
    context.user_data["side"] = "Buy" if action == "🟢 شراء" else "Sell"
    await update.message.reply_text("كم حجم الصفقة (مثلاً 0.001)؟")
    return TRADE_SIZE

async def trade_size(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        size = float(update.message.text)
        context.user_data["qty"] = size
        await update.message.reply_text("حدد سعر وقف الخسارة (Stop Loss) أو أرسل 0 لتجاهله:")
        return TRADE_SL
    except ValueError:
        await update.message.reply_text("يرجى إدخال رقم صحيح.")
        return TRADE_SIZE

async def trade_sl(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        sl = float(update.message.text)
        context.user_data["stop_loss"] = sl
        await update.message.reply_text("حدد سعر جني الربح (Take Profit) أو أرسل 0 لتجاهله:")
        return TRADE_TP
    except ValueError:
        await update.message.reply_text("يرجى إدخال رقم.")
        return TRADE_SL

async def trade_tp(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        tp = float(update.message.text)
        context.user_data["take_profit"] = tp
    except ValueError:
        context.user_data["take_profit"] = 0

    user_id = update.effective_user.id
    session = user_sessions.get(user_id)
    if not session:
        await update.message.reply_text("يرجى تسجيل الدخول أولاً.")
        return ConversationHandler.END
    api_key = session["api_key"]
    api_secret = session["api_secret"]

    # تنفيذ أمر التداول
    symbol = "BTCUSDT"
    side = context.user_data["side"]
    qty = context.user_data["qty"]
    sl = context.user_data["stop_loss"]
    tp = context.user_data["take_profit"]

    params = {
        "category": "linear",
        "symbol": symbol,
        "side": side,
        "orderType": "Market",
        "qty": qty
    }
    if sl > 0:
        params["stopLoss"] = sl
    if tp > 0:
        params["takeProfit"] = tp

    resp = bybit_request("/v5/order/create", params, api_key, api_secret, req_type="POST")
    if resp.get("retCode") == 0:
        await update.message.reply_text("✅ تم تنفيذ الصفقة بنجاح!")
    else:
        await update.message.reply_text(f"❌ فشل تنفيذ الصفقة: {resp.get('retMsg', 'خطأ غير معروف')}")
    return ConversationHandler.END

# ==== التداول التلقائي (مثال تجريبي) ====
async def auto_trade(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    session = user_sessions.get(user_id)
    if not session:
        await update.message.reply_text("يرجى تسجيل الدخول أولاً.")
        return
    # تفعيل التداول التلقائي (وهمي هنا)
    session["auto_trade"] = not session.get("auto_trade", False)
    status = "مفعل ✅" if session["auto_trade"] else "متوقف ⛔️"
    await update.message.reply_text(f"التداول التلقائي الآن: {status}")

# ==== إلغاء ====
async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("تم الإلغاء.", reply_markup=main_menu_keyboard())
    return ConversationHandler.END

# ==== تشغيل البوت ====
def main():
    TOKEN = os.getenv("TELEGRAM_BOT_TOKEN", "8112822168:AAGwqxRY5xZ23pi5PjEhNkytuXLzjaJ1qVI")
    application = ApplicationBuilder().token(TOKEN).build()

    # تسجيل الدخول
    login_conv = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            API_KEY: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_api_key)],
            API_SECRET: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_api_secret)],
        },
        fallbacks=[CommandHandler('cancel', cancel)]
    )

    # التداول اليدوي
    trade_conv = ConversationHandler(
        entry_points=[
            MessageHandler(filters.Regex("^(🟢 شراء|🔴 بيع)$"), trade_action)
        ],
        states={
            TRADE_SIZE: [MessageHandler(filters.TEXT & ~filters.COMMAND, trade_size)],
            TRADE_SL: [MessageHandler(filters.TEXT & ~filters.COMMAND, trade_sl)],
            TRADE_TP: [MessageHandler(filters.TEXT & ~filters.COMMAND, trade_tp)],
        },
        fallbacks=[CommandHandler('cancel', cancel)]
    )

    application.add_handler(login_conv)
    application.add_handler(trade_conv)
    application.add_handler(MessageHandler(filters.Regex("^📈 سعر السوق$"), market_price))
    application.add_handler(MessageHandler(filters.Regex("^💰 رصيد الحساب$"), account_balance))
    application.add_handler(MessageHandler(filters.Regex("^🔁 تداول تلقائي$"), auto_trade))
    application.add_handler(MessageHandler(filters.Regex("^🚪 تسجيل الخروج$"), logout))

    print("Bot is running...")
    application.run_polling()

if __name__ == "__main__":
    main()
